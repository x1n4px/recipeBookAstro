---
import Layout from '../../layouts/Layout.astro';

export function getStaticPaths() {
  const pathx = [];
  for (let i = 1; i < 100; i++) {
    pathx.push({ params: { recipe: i } });
  }
   
  if(pathx.length > 0){
    return pathx;
  }else{
    return [
    {params: {recipe: 1}},  
  ];
  }
 
}



const { recipe } = Astro.params;
console.log(recipe)
import { turso } from '../../turso';

async function getRecipes() {
  try {
    const { rows: typeRows } = await turso.execute(`SELECT * FROM recipe WHERE id = '${recipe}'`);

    if (typeRows.length === 0) {
      throw new Error('Type not found');
    }

    const typeId = typeRows[0].id;
    const { rows: recipeRows } = await turso.execute(`SELECT distinct r.* FROM recipe r INNER JOIN recipe_type tr ON tr.recipe_id = r.id WHERE tr.recipe_id = ${typeId}`);

    return recipeRows;
  } catch (error) {
    console.error('Error fetching recipes:', error);
    return []; // Handle error gracefully, e.g., return an empty array
  }
}

async function getIngredients(){
  try {
   
    const { rows: recipeRows } = await turso.execute(`SELECT i.*, d.quantity FROM recipe_ingredient d INNER JOIN ingredient i ON d.id_ingredient = i.id WHERE d.id_recipe =  ${recipe}`);
 
    return recipeRows;
  } catch (error) {
    console.error('Error fetching recipes:', error);
    return []; // Handle error gracefully, e.g., return an empty array
  }

} 

const recipes = await getRecipes();
const ingredient = await getIngredients();
console.log(ingredient)
console.log(recipes)
---

<Layout title="Welcome to Astro.">

  
 <section class="text-gray-600 body-font bg-lime-200 rounded-b-3xl relative">
 <!-- Botón en la esquina superior derecha -->
 <div class="flex justify-center">
  <a href={`${recipes[0].originalHref}`} target="_blank" class="border-2 border-gray-900 rounded-lg flex items-center px-6 py-2">
    <span class="mr-2">{recipes[0].originalTitle}</span>
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;">
      <path d="m13 3 3.293 3.293-7 7 1.414 1.414 7-7L21 11V3z"></path>
      <path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z"></path>
    </svg>
  </a>
</div>


 <div class="container px-5 py-12 mx-auto flex flex-wrap flex-col items-center">
   <img class="xl:w-2/3 lg:w-3/4 md:w-full w-full mb-10 object-cover object-center rounded-3xl" alt="hero" src=`${recipes[0].repImage}`>
   <div class="text-center w-full">
     <h1 class="text-4xl font-medium title-font mb-4 text-gray-900">{ recipes[0].name }</h1>
     <hr class="mt-6 mb-4 mx-auto border-t-2 w-16 border-gray-900">
   </div>
 </div>
</section>

<section class="text-gray-600 body-font mb-4">
  <div class="container px-5 py-12 mx-auto flex flex-wrap flex-col items-center">
    <h2 class="text-3xl font-medium title-font mb-4 text-gray-900">Ingredientes</h2>
    <ul class="grid grid-cols-2 gap-4 list-none text-lg text-gray-700 mb-6">
      {ingredient.map((post) => (
        <li class="flex items-center p-4">
          <img class="w-14 h-14 mr-2" src=`${post.repImage}` alt=""> <!-- Ajusta el tamaño a 50x50px -->
          <span>{post.quantity} { post.name }</span>
        </li>
        ))}
    </ul>


    <h2 class="text-3xl font-medium title-font mb-4 text-gray-900">Instrucciones</h2>
    <div class="m-10" set:html={recipes[0].step}></div>


    <div class="text-center w-full mt-4">
      <p class="lg:w-2/3 mx-auto leading-relaxed text-base">&#161;Disfruta de tu deliciosa receta&#33;</p>
    </div>
  </div>
</section>


 
</Layout>
 